package com.myclass.algorithm.offer;

import com.myclass.common.entity.ListNode;
import com.myclass.common.utils.ListNodeUtils;

import java.util.Stack;

/**
 * ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÔºåËæìÂÖ•‰∏Ä‰∏™ÈìæË°®ÁöÑÂ§¥ËäÇÁÇπÔºåÂèçËΩ¨ËØ•ÈìæË°®Âπ∂ËæìÂá∫ÂèçËΩ¨ÂêéÈìæË°®ÁöÑÂ§¥ËäÇÁÇπ„ÄÇ
 *
 * Á§∫‰æã:
 *
 * ËæìÂÖ•: 1->2->3->4->5->NULL
 * ËæìÂá∫: 5->4->3->2->1->NULL
 * ÈôêÂà∂Ôºö
 *
 * 0 <= ËäÇÁÇπ‰∏™Êï∞ <= 5000
 *
 * Ê≥®ÊÑèÔºöÊú¨È¢ò‰∏é‰∏ªÁ´ô 206 È¢òÁõ∏ÂêåÔºöhttps://leetcode-cn.com/problems/reverse-linked-list/
 *
 * Related Topics
 * ÈÄíÂΩí
 * ÈìæË°®
 *
 * üëç 511
 * üëé 0
 */
public class Solution24 {

    public static ListNode reverseList(ListNode head) {
        if (head == null) {
            return null;
        }
        ListNode tail = null;
        while (head != null) {
            ListNode current = head;
            head = head.next;
            current.next = tail;
            tail = current;
        }
        return tail;
    }

    public static ListNode reverseList2(ListNode head) {
        if (head == null) {
            return null;
        }
        Stack<ListNode> stack = new Stack<>();
        while (head != null) {
            stack.push(head);
            head = head.next;
        }
        ListNode result = new ListNode();
        ListNode newHead = result;
        while (!stack.empty()) {
            result.next = stack.pop();
            result = result.next;
        }
        result.next = null;
        return newHead.next;
    }

    public static ListNode reverseList3(ListNode head) {
        if (head == null) {
            return null;
        }
        ListNode node = reverseList(head.next);
        if (node != null) {
            ListNode current = node;
            while (current.next != null) {
                current = current.next;
            }
            current.next = head;
        } else {
            node = head;
        }
        head.next = null;
        return node;
    }

    public static void main(String[] args) {
        ListNodeUtils.printListNode(reverseList(ListNodeUtils.newListNode(1, 2, 3, 4, 5)));
        ListNodeUtils.printListNode(reverseList(ListNodeUtils.newListNode(1)));
        ListNodeUtils.printListNode(reverseList(ListNodeUtils.newListNode()));
    }

}
